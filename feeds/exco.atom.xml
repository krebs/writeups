<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Krebs CTF Writeups</title><link href="http://krebsco.de/" rel="alternate"></link><link href="http://krebsco.de/feeds/exco.atom.xml" rel="self"></link><id>http://krebsco.de/</id><updated>2014-07-18T00:00:00+02:00</updated><entry><title>2048</title><link href="http://krebsco.de/2048.html" rel="alternate"></link><updated>2014-07-18T00:00:00+02:00</updated><author><name>exco</name></author><id>tag:krebsco.de,2014-07-18:2048.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Solved by&lt;/strong&gt;: exco, ttb&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Writeup Author&lt;/strong&gt;: exco&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The task was to connect to some ip port 2048 with nc
 $ nc &lt;ip&gt; 2048
and solve 2048, the game in less than 6 minutes.
The time was later reduced to 3.5 minutes.&lt;/p&gt;
&lt;p&gt;2048 on that server looked roughly like this:
&lt;img alt="2048 bash example" src="data/2048/2048_example.jpeg" /&gt;&lt;/p&gt;
&lt;p&gt;u = up
d = down
l = left
r = right&lt;/p&gt;
&lt;p&gt;My first thought was to go find some code that solved 2048
and then either port it to bash or think about it some more.&lt;/p&gt;
&lt;p&gt;So what google threw at me was http://ov3y.github.io/2048-AI/
and the repository: https://github.com/ov3y/2048-AI&lt;/p&gt;
&lt;p&gt;&lt;em&gt;nice&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Some more googling and I found a node netcat package:
https://www.npmjs.org/package/node-netcat&lt;/p&gt;
&lt;p&gt;Almost done ;-)&lt;/p&gt;
&lt;p&gt;ttb then joined me and like 5 hours later we had our automatic 2048 solver.
In our defense - we both never used node before and ended up
just dumping all the functions from 2048-AI in a single file
(not knowing how to properly load js files with node).&lt;/p&gt;
&lt;h2&gt;Coding/Automation:&lt;/h2&gt;
&lt;p&gt;start:&lt;/p&gt;
&lt;p&gt;put all returned data in the my2048 variable
 my2048 = data;
split the lines at \n (newline)
  my2048_lines = my2048.toString('ascii').split('\n');
work some more (ugly) magic to get a 2-dim my2048arr with all the numbers
  for (i=my2048_lines.length-6; i&amp;lt;my2048_lines.length-2; i++) {
   my2048arr [i - my2048_lines.length+6] = my2048_lines[i].trim().split(' ');
    for (j=0; j&amp;lt;4; j++) {
     if (my2048arr [i - my2048_lines.length+6][j] == '.') {
      my2048arr [i - my2048_lines.length+6][j] = '0'}
     my2048arr [i - my2048_lines.length+6][j] = parseInt(my2048arr [i - my2048_lines.length+6][j], 10);
}
  }&lt;/p&gt;
&lt;p&gt;Instantiate a grid for the 2048-AI and fill it with our 2048 array.
 this.grid = new Grid(4);&lt;/p&gt;
&lt;p&gt;for (i=0; i&amp;lt;4; i++) {
   for (j=0; j&amp;lt;4; j++) {&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;tile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Tile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randomAvailableCell&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;my2048arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
 &lt;span class="n"&gt;tile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;tile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my2048arr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// tile.value = my2048arr [i][j];&lt;/span&gt;
&lt;span class="c1"&gt;//console.log(tile);&lt;/span&gt;
&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insertTile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tile&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;Start the solver
  this.ai = new AI(this.grid);&lt;/p&gt;
&lt;p&gt;What we bruteforced was the transformation from our 2048 matrix to the 2048-AI one - 
because when we first got the script to do what we wanted we always got stuck after a while but without the game being lost - so we figured the AI was working with a different matrix orientation.&lt;/p&gt;
&lt;p&gt;//  0: { x: 0,  y: -1 }, // up
//  1: { x: 1,  y: 0 },  // right
//  2: { x: 0,  y: 1 },  // down
//  3: { x: -1, y: 0 }   // left&lt;/p&gt;
&lt;p&gt;var myMove = ['l', 'd', 'r', 'u'];&lt;/p&gt;
&lt;p&gt;get the best move from the AI:
 var nowMove = this.ai.getBest().move;&lt;/p&gt;
&lt;p&gt;send that move to the server:
 client.send(myMove[nowMove] + '\n');&lt;/p&gt;
&lt;p&gt;The whole dirty solution can be found here:
&lt;img alt="2048 automatic bash solver" src="data/2048/2048.node" /&gt;&lt;/p&gt;</summary><category term="2048"></category><category term="pwnium2014"></category></entry></feed>